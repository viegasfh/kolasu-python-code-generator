plugins {
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'java-library'
//    id 'antlr'
    id 'idea'
    id "org.jlleitschuh.gradle.ktlint" version "10.1.0"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
//    id 'com.diffplug.spotless' version "6.4.2"
    id 'maven-publish'
}

project.group = "com.strumenta"
project.version = rootProject.file('src/main/resources/com/strumenta/python/codegen/version.txt').text.trim()

def jvmVersion = rootProject.file('.java-version').text.trim()

sourceCompatibility = jvmVersion

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
//    antlr "org.antlr:antlr4:$antlrVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//    implementation "org.antlr:antlr4-runtime:$antlrVersion"
    implementation "com.strumenta.kolasu:kolasu-core:$kolasuVersion"
    implementation "com.strumenta.kolasu:kolasu-emf:$kolasuVersion"
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.slf4j:slf4j-api:2.0.0'
    implementation 'org.slf4j:slf4j-simple:2.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

//sourceSets.main.java.srcDirs += 'build/generated-src/antlr/main'
//sourceSets.main.kotlin.srcDirs += 'build/generated-src/antlr/main'

compileJava {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    source sourceSets.main.java
}

compileKotlin {
    sourceCompatibility = "$jvmVersion"
    targetCompatibility = "$jvmVersion"
    source sourceSets.main.java, sourceSets.main.kotlin
    kotlinOptions.jvmTarget = "$jvmVersion"
//    dependsOn generateGrammarSource
}

//compileTestKotlin {
//    dependsOn generateTestGrammarSource
//}

//runKtlintCheckOverMainSourceSet {
//    dependsOn generateGrammarSource
//}

//generateGrammarSource {
//    inputs.files fileTree('src/main/antlr').include('*.g4')
//    maxHeapSize = "256m"
//    arguments += ['-package', 'com.strumenta.entity.parser']
//    arguments += ['-listener', '-visitor']
//    outputDirectory = file("$projectDir/build/generated-src/antlr/main/com/strumenta/entity/parser")
//}

//gradle.taskGraph.afterTask { Task task ->
//    if (task.is(generateGrammarSource)) {
//        copy {
//            from fileTree('build/generated-src/antlr/main/com/strumenta/entity/parser').include('*Lexer.tokens')
//            into 'src/main/antlr/'
//        }
//    }
//}

//clean {
//    delete fileTree('src/main/antlr').include('*Lexer.tokens')
//    delete 'src/main/antlr/gen'
//    delete 'src/main/gen'
//}

ktlint {
    version = "0.41.0"
    verbose = true
    outputToConsole = true
    enableExperimentalRules = true
    disabledRules = ["no-wildcard-imports", "experimental:argument-list-wrapping"]
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = rootProject.name
            version = project.version

            from components.java
        }
    }
}